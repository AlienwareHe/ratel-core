package com.virjar.ratel.builder.ratelentry;

import com.virjar.ratel.allcommon.Constants;
import com.virjar.ratel.builder.BootstrapCodeInjector;

import net.dongliu.apk.parser.bean.ApkMeta;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.io.FileUtils;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipFile;
import org.jf.dexlib2.DexFileFactory;
import org.jf.dexlib2.Opcodes;
import org.jf.dexlib2.dexbacked.DexBackedDexFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Enumeration;
import java.util.Properties;

import static com.virjar.ratel.builder.ratelentry.Main.copyAndClose;

public class HelperCreateRDP {
    private final static String SMALI_DIRNAME = "smali";

    static void createRatelDecompileProject(File outputApkFile, BuilderContext context, CommandLine cmd, Properties ratelBuildProperties) throws IOException {
        ApkMeta apkMeta = context.infectApk.apkMeta;
        //1. first calculate an output project directory
        File outProject;
        if (cmd.hasOption('o')) {
            outProject = new File(cmd.getOptionValue('o'));
        } else {
            outProject = new File(
                    apkMeta.getPackageName() + "_" + apkMeta.getVersionName() + "_" + apkMeta.getVersionCode() + "_ratel_decompile");
        }

        System.out.println("output project is:" + outProject.getAbsolutePath());

        FileUtils.deleteDirectory(outProject);
        outProject.mkdirs();

        File rawResource = new File(outProject, "raws");


        //2. then decompile all *.dex file like apktool
        try (ZipFile zipFile = new ZipFile(outputApkFile)) {
            Enumeration<ZipEntry> entries = zipFile.getEntries();
            while (entries.hasMoreElements()) {
                ZipEntry zipEntry = entries.nextElement();
                String entryName = zipEntry.getName();
                if (entryName.endsWith(".dex") && entryName.startsWith("classes")) {
                    //decompile dex file,and skip asset dex files,this is a bad case to decompile assets/*.dex for apktool
                    File smaliDir;
                    if (entryName.equalsIgnoreCase("classes.dex")) {
                        smaliDir = new File(outProject, SMALI_DIRNAME);
                    } else {
                        smaliDir = new File(outProject, SMALI_DIRNAME + "_" + entryName.substring(0, entryName.indexOf(".")));
                    }
                    FileUtils.deleteDirectory(smaliDir);
                    smaliDir.mkdirs();
                    System.out.println("Baksmaling " + entryName + "...");
                    DexBackedDexFile dexFile = DexFileFactory.loadDexEntry(outputApkFile,
                            entryName, true, Opcodes.getDefault()
                    ).getDexFile();
                    BootstrapCodeInjector.baksmali(null, dexFile, smaliDir);
                } else {
                    File destResourceFile = new File(rawResource, entryName);
                    FileUtils.forceMkdirParent(destResourceFile);
                    copyAndClose(zipFile.getInputStream(zipEntry), new FileOutputStream(destResourceFile));
                }
            }
        }

        //3. add rebuild script int the decompile project,ratel decompile project can be migrate to other computer event through there is no ratel environment
        File ratelConfigDir = new File(outProject, "ratel_resource");
        ratelConfigDir.mkdirs();

        ratelBuildProperties.setProperty("app.packageName", apkMeta.getPackageName());
        ratelBuildProperties.setProperty("app.versionName", apkMeta.getVersionName());
        ratelBuildProperties.setProperty("app.versionCode", String.valueOf(apkMeta.getVersionCode()));
        ratelBuildProperties.setProperty("app.appName", apkMeta.getName());

        ratelBuildProperties.store(new FileOutputStream(new File(ratelConfigDir, "ratelConfig.properties")), "auto generated by virjar@ratel");

        copyAndClose(Main.class.getClassLoader().getResourceAsStream(Constants.RDP_BIN_JAR_NAME), new FileOutputStream(new File(ratelConfigDir, "RDP-1.0.jar")));

        File rdpShellFile = new File(ratelConfigDir, "rdp.sh");
        FileUtils.write(rdpShellFile, "#!/usr/bin/env bash\n" +
                "\n# this bash shell auto generated  by RDP(ratel decompile project) component, do not edit this file" +
                "\n# powered by virjar@RatelGroup" +
                "\n" +
                "now_dir=`pwd`\n" +
                "cd `dirname $0`\n" +
                "script_dir=`pwd`\n" +
                "cd ..\n" +
                "\n" +
                "rdp_jar=${script_dir}/RDP-1.0.jar\n" +
                "\n" +
                "if [ -f ${rdp_jar} ] ;then\n" +
                "    echo \"use ${rdp_jar}\"\n" +
                "else\n" +
                "    echo \"can not find rdp jar in path:${rdp_jar}\"\n" +
                "    echo -1\n" +
                "fi\n" +
                "\n" +
                "cd ${now_dir}\n" +
                "java -jar ${rdp_jar}  $*\n", StandardCharsets.UTF_8);
        rdpShellFile.setExecutable(true);

        File gitIgnoreFile = new File(outProject, ".gitignore");
        FileUtils.writeStringToFile(gitIgnoreFile,
                ".idea/\n" +
                        "out/\n", StandardCharsets.UTF_8);
    }

}
